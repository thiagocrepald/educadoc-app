{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"control\", \"name\", \"error\", \"type\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport { TextInputMask } from 'react-native-masked-text';\nimport { Controller } from 'react-hook-form';\nimport { Form } from \"../\";\nimport { Error } from \"./styles\";\nimport { BoxForm } from \"../styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function Controlled(_ref) {\n  var control = _ref.control,\n      name = _ref.name,\n      error = _ref.error,\n      type = _ref.type,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  if (type === \"phone\") {\n    return _jsxs(_Fragment, {\n      children: [_jsx(Controller, {\n        name: name,\n        control: control,\n        render: function render(_ref2) {\n          var _ref2$field = _ref2.field,\n              onChange = _ref2$field.onChange,\n              value = _ref2$field.value;\n          return _jsx(BoxForm, {\n            children: _jsx(TextInputMask, _objectSpread({\n              style: {\n                padding: 16,\n                color: '#fff'\n              },\n              type: 'cel-phone',\n              options: {\n                maskType: 'BRL',\n                withDDD: true,\n                dddMask: '(99)'\n              },\n              onChangeText: onChange,\n              value: value\n            }, rest))\n          });\n        }\n      }), error && _jsx(Error, {\n        children: error.message\n      })]\n    });\n  } else if (type === \"cpf\") {\n    return _jsxs(_Fragment, {\n      children: [_jsx(Controller, {\n        name: name,\n        control: control,\n        render: function render(_ref3) {\n          var _ref3$field = _ref3.field,\n              onChange = _ref3$field.onChange,\n              value = _ref3$field.value;\n          return _jsx(BoxForm, {\n            children: _jsx(TextInputMask, _objectSpread({\n              style: {\n                padding: 16,\n                color: '#fff'\n              },\n              type: 'cpf',\n              keyboardType: \"numeric\",\n              onChangeText: onChange,\n              value: value\n            }, rest))\n          });\n        }\n      }), error && _jsx(Error, {\n        children: error.message\n      })]\n    });\n  } else if (type === \"date\") {\n    return _jsxs(_Fragment, {\n      children: [_jsx(Controller, {\n        name: name,\n        control: control,\n        render: function render(_ref4) {\n          var _ref4$field = _ref4.field,\n              onChange = _ref4$field.onChange,\n              value = _ref4$field.value;\n          return _jsx(BoxForm, {\n            children: _jsx(TextInputMask, _objectSpread({\n              style: {\n                padding: 16,\n                color: '#fff'\n              },\n              maxLength: 10,\n              keyboardType: \"numeric\",\n              type: 'datetime',\n              onChangeText: onChange,\n              value: value\n            }, rest))\n          });\n        }\n      }), error && _jsx(Error, {\n        children: error.message\n      })]\n    });\n  } else return _jsxs(_Fragment, {\n    children: [_jsx(Controller, {\n      name: name,\n      control: control,\n      render: function render(_ref5) {\n        var _ref5$field = _ref5.field,\n            onChange = _ref5$field.onChange,\n            value = _ref5$field.value;\n        return _jsx(Form, _objectSpread({\n          onChangeText: onChange,\n          value: value\n        }, rest));\n      }\n    }), error && _jsx(Error, {\n      children: error.message\n    })]\n  });\n}","map":{"version":3,"names":["React","TextInputMask","Controller","Form","Error","BoxForm","Controlled","control","name","error","type","rest","field","onChange","value","padding","color","maskType","withDDD","dddMask","message"],"sources":["D:/Hygea - EducaDoc/educadoc-app/src/components/Form/Controlled/index.tsx"],"sourcesContent":["import React from 'react'\r\n\r\nimport { TextInputMask } from 'react-native-masked-text'\r\nimport { Control, Controller, FieldError } from 'react-hook-form'\r\nimport { Form, InputProps } from '../'\r\nimport { Error } from './styles'\r\nimport { BoxForm } from '../styles'\r\n\r\ntype Props = InputProps & {\r\n    control: Control<any>;\r\n    name: string;\r\n    error?: FieldError;\r\n    type?: string;\r\n}\r\n\r\nexport function Controlled({ control, name, error, type, ...rest }: Props) {\r\n\r\n    if (type === \"phone\") {\r\n        return (\r\n            <>\r\n                <Controller\r\n                    name={name}\r\n                    control={control}\r\n                    render={({ field: { onChange, value } }) => (\r\n                        <BoxForm>\r\n                            <TextInputMask\r\n                                style={{ padding: 16, color: '#fff' }}\r\n                                type={'cel-phone'}\r\n                                options={{\r\n                                    maskType: 'BRL',\r\n                                    withDDD: true,\r\n                                    dddMask: '(99)'\r\n                                }}\r\n                                onChangeText={onChange}\r\n                                value={value}\r\n                                {...rest}\r\n                            />\r\n                        </BoxForm>\r\n                    )}\r\n                />\r\n                {error && <Error>{error.message}</Error>}\r\n            </>\r\n        )\r\n    } else if (type === \"cpf\") {\r\n        return (\r\n            <>\r\n                <Controller\r\n                    name={name}\r\n                    control={control}\r\n                    render={({ field: { onChange, value } }) => (\r\n                        <BoxForm>\r\n                            <TextInputMask\r\n                                style={{ padding: 16, color: '#fff' }}\r\n                                type={'cpf'}\r\n                                keyboardType=\"numeric\"\r\n                                onChangeText={onChange}\r\n                                value={value}\r\n                                {...rest}\r\n                            />\r\n                        </BoxForm>\r\n                    )}\r\n                />\r\n                {error && <Error>{error.message}</Error>}\r\n            </>\r\n        )\r\n    } else if (type === \"date\") {\r\n        return (\r\n            <>\r\n                <Controller\r\n                    name={name}\r\n                    control={control}\r\n                    render={({ field: { onChange, value } }) => (\r\n                        <BoxForm>\r\n                            <TextInputMask\r\n                                style={{ padding: 16, color: '#fff' }}\r\n                                maxLength={10}\r\n                                keyboardType=\"numeric\"\r\n                                type={'datetime'}\r\n                                onChangeText={onChange}\r\n                                value={value}\r\n                                {...rest}\r\n                            />\r\n                        </BoxForm>\r\n                    )}\r\n                />\r\n                {error && <Error>{error.message}</Error>}\r\n            </>\r\n        )\r\n    } else\r\n        return (\r\n            <>\r\n                <Controller\r\n                    name={name}\r\n                    control={control}\r\n                    render={({ field: { onChange, value } }) => (\r\n                        <Form\r\n                            onChangeText={onChange}\r\n                            value={value}\r\n                            {...rest}\r\n                        />\r\n                    )}\r\n                />\r\n                {error && <Error>{error.message}</Error>}\r\n            </>\r\n        )\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}